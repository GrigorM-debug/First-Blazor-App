@page "/users"
@attribute [StreamRendering]
@inject HttpClient HttpClient

<PageTitle>Users</PageTitle>

<h3>Users</h3>

<p>This component demonstrates fetching and displaying a list of users.</p>

@if (users == null)
{
    <p><em>Loading...</em></p>
}
else if (Error != null)
{
    <div class="alert alert-danger">
        <strong>Error:</strong> @Error
    </div>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Email</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in users)
            {
                <tr>
                    <td>@user.Id</td>
                    <td>@user.Name</td>
                    <td>@user.Email</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private User[] users;
    private string Error;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Simulate asynchronous loading to demonstrate streaming rendering
            await Task.Delay(500);
            // Fetch users from a hypothetical API endpoint
            users = await HttpClient.GetFromJsonAsync<User[]>("https://jsonplaceholder.typicode.com/users");   
        } catch (Exception ex)
        {
            Console.WriteLine($"Error fetching users: {ex.Message}");
            Error = "Failed to load users.";
            // Handle error appropriately, e.g., show a message to the user
        }
    }

    private class User
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string Email { get; set; }
    }

}
